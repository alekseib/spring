package com.example.hello;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;

/**
 * –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –¥–ª—è HelloController
 * @WebMvcTest –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ web-—Å–ª–æ–π (–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã)
 */
@WebMvcTest(HelloController.class)
class HelloControllerTest {

    @Autowired
    private MockMvc mockMvc;
    
    @Autowired
    private ObjectMapper objectMapper;
    
    @Test
    void testHelloEndpoint() throws Exception {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /
        mockMvc.perform(get("/"))
                .andDo(print()) // –ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–ø—Ä–æ—Å/–æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
                .andExpect(status().isOk())
                .andExpect(content().string("Hello World! -1156"));
    }
    
    @Test
    void testHelloMessageEndpoint() throws Exception {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /hello
        mockMvc.perform(get("/hello"))
                .andDo(print())
                .andExpect(status().isOk())
                .andExpect(content().string("–ü—Ä–∏–≤–µ—Ç –∏–∑ Spring Boot –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!"))
                .andExpect(content().contentType("text/plain;charset=UTF-8"));
    }
    
    @Test
    void testHelloMessagePost_ValidMessage() throws Exception {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º POST /hello —Å –≤–∞–ª–∏–¥–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        TestMessage testMessage = TestMessage.of("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
        String jsonContent = objectMapper.writeValueAsString(testMessage);
        
        mockMvc.perform(post("/hello")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(jsonContent))
                .andDo(print())
                .andExpect(status().isOk())
                .andExpect(content().string("–ü—Ä–∏–≤–µ—Ç –∏–∑ Spring Boot –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è! –°–æ–æ–±—â–µ–Ω–∏–µ: –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"));
    }
    
    @Test
    void testHelloMessagePost_EmptyMessage() throws Exception {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º POST /hello —Å –ø—É—Å—Ç—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        String jsonContent = "{\"message\":\"\"}";
        
        mockMvc.perform(post("/hello")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(jsonContent))
                .andDo(print())
                .andExpect(status().isBadRequest()) // –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                .andExpect(content().string("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: Message cannot be empty"));
    }
    
    @Test
    void testHelloMessagePost_NullMessage() throws Exception {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º POST /hello —Å null —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        String jsonContent = "{\"message\":null}";
        
        mockMvc.perform(post("/hello")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(jsonContent))
                .andDo(print())
                .andExpect(status().isBadRequest()) // –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                .andExpect(content().string("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: Message cannot be empty"));
    }
    
    @Test
    void testHelloMessagePost_InvalidJson() throws Exception {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º POST /hello —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º JSON
        String invalidJson = "{invalid json}";
        
        mockMvc.perform(post("/hello")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(invalidJson))
                .andDo(print())
                .andExpect(status().isBadRequest())
                .andExpect(content().string("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"));
    }
    
    @Test
    void testHelloMessagePost_WithSpecialCharacters() throws Exception {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º POST /hello —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        TestMessage testMessage = TestMessage.of("–ü—Ä–∏–≤–µ—Ç! üöÄ Test √±√°√©√≠√≥√∫");
        String jsonContent = objectMapper.writeValueAsString(testMessage);
        
        mockMvc.perform(post("/hello")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(jsonContent))
                .andDo(print())
                .andExpect(status().isOk())
                .andExpect(content().string("–ü—Ä–∏–≤–µ—Ç –∏–∑ Spring Boot –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è! –°–æ–æ–±—â–µ–Ω–∏–µ: –ü—Ä–∏–≤–µ—Ç! üöÄ Test √±√°√©√≠√≥√∫"));
    }
    
    @Test
    void testNonExistentEndpoint() throws Exception {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π endpoint
        mockMvc.perform(get("/nonexistent"))
                .andDo(print())
                .andExpect(status().isNotFound());
    }
}