package com.example.hello;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –¥–ª—è TestMessage Record
 */
class TestMessageTest {
    
    @Test
    void testValidMessage() {
        // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        String message = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ";
        TestMessage testMessage = new TestMessage(message);
        
        assertEquals(message, testMessage.message());
    }
    
    @Test
    void testValidMessageWithFactory() {
        // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥
        String message = "–°–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É";
        TestMessage testMessage = TestMessage.of(message);
        
        assertEquals(message, testMessage.message());
    }
    
    @Test
    void testNullMessage() {
        // –¢–µ—Å—Ç —Å null —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        IllegalArgumentException exception = assertThrows(
            IllegalArgumentException.class, 
            () -> new TestMessage(null)
        );
        
        assertEquals("Message cannot be empty", exception.getMessage());
    }
    
    @Test
    void testEmptyMessage() {
        // –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        IllegalArgumentException exception = assertThrows(
            IllegalArgumentException.class,
            () -> new TestMessage("")
        );
        
        assertEquals("Message cannot be empty", exception.getMessage());
    }
    
    @Test
    void testWhitespaceMessage() {
        // –¢–µ—Å—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤
        IllegalArgumentException exception = assertThrows(
            IllegalArgumentException.class,
            () -> new TestMessage("   ")
        );
        
        assertEquals("Message cannot be empty", exception.getMessage());
    }
    
    @Test
    void testEqualsAndHashCode() {
        // –¢–µ—Å—Ç equals –∏ hashCode (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –¥–ª—è Record)
        TestMessage message1 = TestMessage.of("test");
        TestMessage message2 = TestMessage.of("test");
        TestMessage message3 = TestMessage.of("different");
        
        // equals
        assertEquals(message1, message2);
        assertNotEquals(message1, message3);
        
        // hashCode
        assertEquals(message1.hashCode(), message2.hashCode());
        assertNotEquals(message1.hashCode(), message3.hashCode());
    }
    
    @Test
    void testToString() {
        // –¢–µ—Å—Ç toString (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–ª—è Record)
        TestMessage message = TestMessage.of("hello");
        String toStringResult = message.toString();
        
        assertTrue(toStringResult.contains("TestMessage"));
        assertTrue(toStringResult.contains("hello"));
        
        // Record toString format: ClassName[field1=value1, field2=value2]
        assertEquals("TestMessage[message=hello]", toStringResult);
    }
    
    @Test
    void testMessageWithSpecialCharacters() {
        // –¢–µ—Å—Ç —Å Unicode –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        String specialMessage = "–ü—Ä–∏–≤–µ—Ç! üöÄ Test √±√°√©√≠√≥√∫ #@$%";
        TestMessage testMessage = TestMessage.of(specialMessage);
        
        assertEquals(specialMessage, testMessage.message());
    }
}